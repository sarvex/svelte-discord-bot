CREATE TABLE IF NOT EXISTS tags (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	tag_name VARCHAR(255) NOT NULL UNIQUE,
	tag_content TEXT NOT NULL,
	author_id TEXT NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS tag_name_idx ON tags(tag_name);

CREATE EXTENSION IF NOT EXISTS pg_trgm;

CREATE OR REPLACE FUNCTION matching_tags(to_search VARCHAR) RETURNS TABLE (
		tag_name VARCHAR(255)
	) AS $$
	BEGIN 
		RETURN QUERY
		SELECT 
			tags.tag_name
		FROM tags
		WHERE tags.tag_name % to_search
		ORDER BY similarity(tags.tag_name, to_search)
		LIMIT 5;
	END;
$$ LANGUAGE PLPGSQL;

-- A plpgsql function to return all tags as a paginated list
-- TODO: Read somewhere that this is a slow way of doing pagination
-- Hopefully won't be a big deal for us, if it does blame copilot
CREATE OR REPLACE FUNCTION get_tags_list(
		page_number INTEGER
	) RETURNS TABLE (
		tag_name VARCHAR(255),
		author_id TEXT
	) AS $$
	BEGIN 
		RETURN QUERY
		SELECT 
			tags.tag_name,
			tags.author_id
		FROM tags
		ORDER BY tags.tag_name
		LIMIT 10
		OFFSET (page_number - 1) * 10;
	END;
$$ LANGUAGE PLPGSQL;
